<?xml version="1.0" encoding="utf-8"?>
<project name="Trumpet"
         default="all"
         basedir=".">

  <!-- directories -->

  <property name="src"
            value="${basedir}/src"/>
  <property name="build"
            value="${basedir}/build"/>
  <property name="dist"
            value="${basedir}/dist"/>

  <!-- application properties -->
  <property name="app.name"
            value="trumpet"/>
  <property name="app.version"
            value="0.0.0.1"/>
  <property name="dist.jar"
            value="${dist}/${app.name}-${app.version}.jar"/>

  <!-- dependencies; include system specific definitions in build.properties -->
  
  <!-- This should be set to the path to scala home directory
  <property name="scala.dir"
            value=""/>
  -->
  
  <!-- This should be set to the path to your jetty home directory
  <property name="jetty.dir"
            value=""/>
  -->

  <!-- include system specific definitions -->
  <property file="${basedir}/build.properties"/>

  <!-- external jar files -->

  <!-- compiler options -->

  <!-- compile with deprecation information (on,off,yes,no) -->
  <property name="compiler.deprecation"
            value="yes"/>
  <!-- extra parameters to pass to compiler that are not supported by ant e.g. -optimise -->
  <property name="compiler.addparams"
            value="-g:none"/>
  <!-- whether or not to force the compiler to compiler unmodified files -->
  <property name="compiler.force"
            value="false"/>
  <!-- whether or not to show the names of files being compiled -->
  <property name="compiler.showfilenames"
            value="true"/>
  <!-- compiler output (none,verbose,debug) -->
  <property name="compiler.output"
            value="none"/>

  <!-- classpaths -->

  <!-- path for the scala jars -->
  <path id="scala.classpath">
    <fileset dir="${scala.dir}/lib"
             includes="*.jar"/>
  </path>

  <!-- path to the various third party libraries needed -->
  <path id="externals.classpath">
    <fileset dir="${jetty.dir}/lib"
             includes="*.jar"/>
  </path>

  <!-- path to the distro jar -->
  <path id="distro.classpath">
    <fileset dir="${dist}"
             includes="*.jar"/>
  </path>

  <!-- targets -->

  <!-- import scala tasks -->
  <taskdef resource="scala/tools/ant/antlib.xml"
           classpathref="scala.classpath"/>

  <target name="all"
          depends="clean,compile,dist"
          description="Make everything from scratch"/>

  <target name="clean"
          description="Clean up all build artifacts">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>

  <target name="prepare_build"
          depends=""
          description="Prepare filesystem for building">
    <mkdir dir="${build}"/>
  </target>

  <target name="prepare_dist"
          depends=""
          description="Prepare filesystem for creation distro">
    <mkdir dir="${dist}"/>
  </target>

  <target name="compile"
          depends="prepare_build"
          description="Compile sources">
    <scalac srcdir="${src}"
            destdir="${build}"
            deprecation="${compiler.deprecation}"
            addparams="${compiler.addparams}"
            force="${compiler.force}"
            failonerror="true"
            logging="${compiler.output}">
      <classpath refid="externals.classpath"/>
      <classpath refid="scala.classpath"/>
    </scalac>
  </target>

  <target name="dist"
          depends="prepare_dist"
          description="Create a distribution package">
    <jar jarfile="${dist.jar}"
         basedir="${build}">
      <manifest>
        <attribute name="Main-Class"
                   value="Trumpet"/>
      </manifest>
    </jar>
  </target>

  <target name="run"
          depends="dist"
          description="Run the standalone server">
    <java classname="scala.tools.nsc.MainGenericRunner"
          fork="true"
          dir="${dist}">
      <classpath refid="externals.classpath"/>
      <classpath refid="scala.classpath"/>
      <classpath refid="distro.classpath"/>
      <arg line="-usejavacp Trumpet"/>
    </java>
  </target>

</project>
